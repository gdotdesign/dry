Array.prototype.compact = function() {
  return this.filter(function(item) {
    return !!item;
  });
};

String.prototype.camelize = function() {
  return this.replace(/[- _](w)/g, function(matches) {
    return matches[1].toUpperCase();
  });
};
window.dry = { 
compile: function (str) {
    var classes, code, root, s;
    classes = require('classes');
    classes.Modules = [];
    classes.Classes = [];
    root = this.parser.parse(str);
    code = (function() {
      var _i, _len, _ref, _results;
      _ref = root.statements.compact();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _results.push(s.compile());
      }
      return _results;
    })();
    return code.join("\n");
  },
parser: (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "line": parse_line,
        "Statement": parse_Statement,
        "After": parse_After,
        "Every": parse_Every,
        "Include": parse_Include,
        "Require": parse_Require,
        "Comment": parse_Comment,
        "Json": parse_Json,
        "Primary": parse_Primary,
        "Variable": parse_Variable,
        "Accessor": parse_Accessor,
        "AttributeAccessor": parse_AttributeAccessor,
        "StyleAccessor": parse_StyleAccessor,
        "PropertyAccessor": parse_PropertyAccessor,
        "AltPropertyAccessor": parse_AltPropertyAccessor,
        "ConstLookup": parse_ConstLookup,
        "MemberAccess": parse_MemberAccess,
        "Group": parse_Group,
        "Operation": parse_Operation,
        "Await": parse_Await,
        "XHR": parse_XHR,
        "Call": parse_Call,
        "If": parse_If,
        "Else": parse_Else,
        "Try": parse_Try,
        "Catch": parse_Catch,
        "Unless": parse_Unless,
        "ArgumentList": parse_ArgumentList,
        "Template": parse_Template,
        "Render": parse_Render,
        "Module": parse_Module,
        "Mixin": parse_Mixin,
        "Class": parse_Class,
        "New": parse_New,
        "Super": parse_Super,
        "Get": parse_Get,
        "Prop": parse_Prop,
        "Set": parse_Set,
        "Def": parse_Def,
        "Contsructor": parse_Contsructor,
        "Log": parse_Log,
        "Dispose": parse_Dispose,
        "Event": parse_Event,
        "Conditional": parse_Conditional,
        "ArrayLiteral": parse_ArrayLiteral,
        "List": parse_List,
        "LEFT": parse_LEFT,
        "Selector": parse_Selector,
        "GlobalSelector": parse_GlobalSelector,
        "SelfSelector": parse_SelfSelector,
        "ObjectLiteral": parse_ObjectLiteral,
        "Iteration": parse_Iteration,
        "Operator": parse_Operator,
        "Literal": parse_Literal,
        "Null": parse_Null,
        "Element": parse_Element,
        "ElementAttribute": parse_ElementAttribute,
        "String": parse_String,
        "DoubleQuotedString": parse_DoubleQuotedString,
        "SingleQuotedString": parse_SingleQuotedString,
        "Boolean": parse_Boolean,
        "Color": parse_Color,
        "HexColor": parse_HexColor,
        "Hex3Digit": parse_Hex3Digit,
        "Hex6Digit": parse_Hex6Digit,
        "HexDigit": parse_HexDigit,
        "RgbColor": parse_RgbColor,
        "HslColor": parse_HslColor,
        "Unit": parse_Unit,
        "Number": parse_Number,
        "Float": parse_Float,
        "Integer": parse_Integer,
        "Identifier": parse_Identifier,
        "ConstantIdentifier": parse_ConstantIdentifier,
        "EOF": parse_EOF,
        "_": parse__,
        "__": parse___
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = "start@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = [];
        result1 = parse_line();
        if (result1 === null) {
          pos1 = clone(pos);
          result1 = [];
          if (input.charCodeAt(pos.offset) === 32) {
            result2 = " ";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (input.charCodeAt(pos.offset) === 32) {
              result2 = " ";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 10) {
              result2 = "\n";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\n\"");
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos1);
            }
          } else {
            result1 = null;
            pos = clone(pos1);
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_line();
          if (result1 === null) {
            pos1 = clone(pos);
            result1 = [];
            if (input.charCodeAt(pos.offset) === 32) {
              result2 = " ";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              if (input.charCodeAt(pos.offset) === 32) {
                result2 = " ";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 10) {
                result2 = "\n";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = clone(pos1);
              }
            } else {
              result1 = null;
              pos = clone(pos1);
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
        return (function() {
          return this.tree.root;
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_line() {
        var cacheKey = "line@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        if (input.substr(pos.offset, 2) === "  ") {
          result1 = "  ";
          advance(pos, 2);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"  \"");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos.offset, 2) === "  ") {
            result1 = "  ";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"  \"");
            }
          }
        }
        if (result0 !== null) {
          result1 = parse_Statement();
          if (result1 !== null) {
            result2 = [];
            result3 = parse__();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse__();
            }
            if (result2 !== null) {
              result3 = parse_EOF();
              if (result3 === null) {
                pos2 = clone(pos);
                reportFailures++;
                if (input.length > pos.offset) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                reportFailures--;
                if (result3 === null) {
                  result3 = "";
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, indent, name, ws) {
        return (function() {
          return this.tree.addNode(indent.length, name, line, column);
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Statement() {
        var cacheKey = "Statement@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_ObjectLiteral();
        if (result0 === null) {
          result0 = parse_Comment();
          if (result0 === null) {
            result0 = parse_Iteration();
            if (result0 === null) {
              result0 = parse_ArrayLiteral();
              if (result0 === null) {
                result0 = parse_Include();
                if (result0 === null) {
                  result0 = parse_Require();
                  if (result0 === null) {
                    result0 = parse_Log();
                    if (result0 === null) {
                      result0 = parse_After();
                      if (result0 === null) {
                        result0 = parse_Every();
                        if (result0 === null) {
                          result0 = parse_Await();
                          if (result0 === null) {
                            result0 = parse_XHR();
                            if (result0 === null) {
                              result0 = parse_Else();
                              if (result0 === null) {
                                result0 = parse_If();
                                if (result0 === null) {
                                  result0 = parse_Unless();
                                  if (result0 === null) {
                                    result0 = parse_Try();
                                    if (result0 === null) {
                                      result0 = parse_Catch();
                                      if (result0 === null) {
                                        result0 = parse_Super();
                                        if (result0 === null) {
                                          result0 = parse_Module();
                                          if (result0 === null) {
                                            result0 = parse_New();
                                            if (result0 === null) {
                                              result0 = parse_Get();
                                              if (result0 === null) {
                                                result0 = parse_Set();
                                                if (result0 === null) {
                                                  result0 = parse_Class();
                                                  if (result0 === null) {
                                                    result0 = parse_Mixin();
                                                    if (result0 === null) {
                                                      result0 = parse_Prop();
                                                      if (result0 === null) {
                                                        result0 = parse_Template();
                                                        if (result0 === null) {
                                                          result0 = parse_Render();
                                                          if (result0 === null) {
                                                            result0 = parse_Conditional();
                                                            if (result0 === null) {
                                                              result0 = parse_Contsructor();
                                                              if (result0 === null) {
                                                                result0 = parse_Def();
                                                                if (result0 === null) {
                                                                  result0 = parse_Dispose();
                                                                  if (result0 === null) {
                                                                    result0 = parse_Event();
                                                                    if (result0 === null) {
                                                                      result0 = parse_Operation();
                                                                      if (result0 === null) {
                                                                        result0 = parse_Call();
                                                                        if (result0 === null) {
                                                                          result0 = parse_MemberAccess();
                                                                          if (result0 === null) {
                                                                            result0 = parse_Group();
                                                                            if (result0 === null) {
                                                                              result0 = parse_Primary();
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_After() {
        var cacheKey = "After@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "after") {
          result0 = "after";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"after\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base) {
        return (function() {
          return new this.After({
            type: 'after',
            exp: base
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Every() {
        var cacheKey = "Every@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "every") {
          result0 = "every";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"every\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base) {
        return (function() {
          return new this.Every({
            type: 'every',
            exp: base
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Include() {
        var cacheKey = "Include@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "include") {
          result0 = "include";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"include\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse__();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse__();
          }
          if (result1 !== null) {
            result2 = parse_String();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) {
        return (function() {
          return new this.Include({
            type: 'include',
            exp: s
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Require() {
        var cacheKey = "Require@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "require") {
          result0 = "require";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"require\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse__();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse__();
          }
          if (result1 !== null) {
            result2 = parse_String();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) {
        return (function() {
          return new this.Statement({
            type: 'require',
            exp: s
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Comment() {
        var cacheKey = "Comment@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = [];
            if (/^[^\n\r]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n\\r]");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (/^[^\n\r]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\n\\r]");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
        return (function() {
          return "";
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Json() {
        var cacheKey = "Json@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 60) {
          result0 = "<";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Statement();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, statement) {
        return (function() {
          return new this.Json(statement);
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Primary() {
        var cacheKey = "Primary@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "self") {
          result0 = "self";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"self\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
        return (function() {
          return new this.Literal("self");
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_Json();
          if (result0 === null) {
            result0 = parse_Selector();
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_Literal();
              if (result0 !== null) {
                result0 = (function(offset, line, column, lit) {
              return (function() {
                if (lit instanceof this.Literal) {
                  return lit;
                } else {
                  return new this.Literal(lit);
                }
              }).apply(__initializer);
              })(pos0.offset, pos0.line, pos0.column, result0);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                result0 = parse_Variable();
                if (result0 === null) {
                  result0 = parse_ConstLookup();
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Variable() {
        var cacheKey = "Variable@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 64) {
          result0 = "@";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_Identifier();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, self, name) {
        return (function() {
          var v;
          v = new this.Variable(name);
          v.self = !!self;
          return v;
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Accessor() {
        var cacheKey = "Accessor@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_StyleAccessor();
        if (result0 === null) {
          result0 = parse_AttributeAccessor();
          if (result0 === null) {
            result0 = parse_PropertyAccessor();
            if (result0 === null) {
              result0 = parse_AltPropertyAccessor();
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_AttributeAccessor() {
        var cacheKey = "AttributeAccessor@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 64) {
          result0 = "@";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@\"");
          }
        }
        if (result0 !== null) {
          if (/^[a-z]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-z]");
            }
          }
          if (result1 !== null) {
            if (/^[a-z0-9\-]/i.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[a-z0-9\\-]i");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[a-z0-9\-]/i.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[a-z0-9\\-]i");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
        return (function() {
          return new this.Accessor('attribute', head + tail.join(""));
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_StyleAccessor() {
        var cacheKey = "StyleAccessor@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          if (/^[a-z]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-z]");
            }
          }
          if (result1 !== null) {
            if (/^[a-z0-9\-]/i.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[a-z0-9\\-]i");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[a-z0-9\-]/i.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[a-z0-9\\-]i");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
        return (function() {
          return new this.Accessor('style', head + tail.join(""));
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyAccessor() {
        var cacheKey = "PropertyAccessor@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Identifier();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        return (function() {
          return new this.Accessor('property', name);
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_AltPropertyAccessor() {
        var cacheKey = "AltPropertyAccessor@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Statement();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 93) {
              result2 = "]";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) {
        return (function() {
          return new this.Accessor('alt-property', s);
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstLookup() {
        var cacheKey = "ConstLookup@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ConstantIdentifier();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          if (input.charCodeAt(pos.offset) === 58) {
            result2 = ":";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result2 !== null) {
            result3 = parse_ConstantIdentifier();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos3);
            }
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result2 = (function(offset, line, column, name) {
          return (function() {
            return name;
          }).apply(__initializer);
          })(pos2.offset, pos2.line, pos2.column, result2[1]);
          }
          if (result2 === null) {
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            if (input.charCodeAt(pos.offset) === 58) {
              result2 = ":";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_ConstantIdentifier();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, name) {
            return (function() {
              return name;
            }).apply(__initializer);
            })(pos2.offset, pos2.line, pos2.column, result2[1]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, right) {
        return (function() {
          return new this.Variable([left].concat(right).join("."));
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_MemberAccess() {
        var cacheKey = "MemberAccess@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Group();
        if (result0 === null) {
          result0 = parse_Primary();
        }
        if (result0 !== null) {
          result1 = parse_Accessor();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base, data) {
        return (function() {
          return new this.MemberAccessor(base, data);
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Group() {
        var cacheKey = "Group@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 40) {
          result0 = "(";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse__();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse__();
          }
          if (result1 !== null) {
            result2 = parse_Statement();
            if (result2 !== null) {
              result3 = [];
              result4 = parse__();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse__();
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 41) {
                  result4 = ")";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) {
        return (function() {
          return new this.Group({
            type: 'group',
            exp: s
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Operation() {
        var cacheKey = "Operation@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Call();
        if (result0 === null) {
          result0 = parse_LEFT();
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_Operator();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_Statement();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, operator, right) {
        return (function() {
          return new this.Operation({
            type: 'operation',
            left: left,
            right: right,
            operator: operator
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Await() {
        var cacheKey = "Await@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "await") {
          result0 = "await";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"await\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
        return (function() {
          return new this.Await({
            type: 'await'
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_XHR() {
        var cacheKey = "XHR@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 126) {
          result0 = "~";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"~\"");
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 62) {
            result1 = ">";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\">\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 61) {
              result1 = "=";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos.offset) === 33) {
                result1 = "!";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!\"");
                }
              }
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result3 = parse__();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse__();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_Statement();
              if (result3 !== null) {
                pos2 = clone(pos);
                pos3 = clone(pos);
                result5 = parse__();
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse__();
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  if (input.substr(pos.offset, 4) === "with") {
                    result5 = "with";
                    advance(pos, 4);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"with\"");
                    }
                  }
                  if (result5 !== null) {
                    result7 = parse__();
                    if (result7 !== null) {
                      result6 = [];
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse__();
                      }
                    } else {
                      result6 = null;
                    }
                    if (result6 !== null) {
                      result7 = parse_Statement();
                      if (result7 !== null) {
                        result4 = [result4, result5, result6, result7];
                      } else {
                        result4 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result4 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result4 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos3);
                }
                if (result4 !== null) {
                  result4 = (function(offset, line, column, s) {
                return (function() {
                  return s;
                }).apply(__initializer);
                })(pos2.offset, pos2.line, pos2.column, result4[3]);
                }
                if (result4 === null) {
                  pos = clone(pos2);
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, type, url, data) {
        return (function() {
          return new this.XHR({
            type: 'xhr',
            method: type,
            url: url,
            data: data
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Call() {
        var cacheKey = "Call@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_LEFT();
        if (result0 !== null) {
          result1 = parse_ArgumentList();
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 33) {
              result1 = "!";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"!\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos.offset) === 63) {
                result1 = "?";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"?\"");
                }
              }
            }
          }
          if (result1 !== null) {
            pos2 = clone(pos);
            pos3 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              result3 = parse_ArgumentList();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, a) {
            return (function() {
              return a;
            }).apply(__initializer);
            })(pos2.offset, pos2.line, pos2.column, result2[1]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = [];
              result4 = parse__();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse__();
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 38) {
                  result4 = "&";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"&\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse__();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse__();
                  }
                  if (result5 !== null) {
                    result6 = parse_Statement();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, s) {
              return (function() {
                return s || true;
              }).apply(__initializer);
              })(pos2.offset, pos2.line, pos2.column, result3[3]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base, args, callbackArgs, callback) {
        return (function() {
          return new this.Call({
            type: 'call',
            exp: base,
            args: args,
            callback: callback,
            callbackArgs: callbackArgs
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_If() {
        var cacheKey = "If@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "if") {
          result0 = "if";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"if\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base) {
        return (function() {
          return new this.If({
            type: 'if',
            exp: base
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Else() {
        var cacheKey = "Else@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "else") {
          result0 = "else";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"else\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
        return (function() {
          return new this.Else({
            type: 'else'
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Try() {
        var cacheKey = "Try@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "try") {
          result0 = "try";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"try\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
        return (function() {
          return new this.Try({
            type: 'try'
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Catch() {
        var cacheKey = "Catch@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "catch") {
          result0 = "catch";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"catch\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ArgumentList();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, args) {
        return (function() {
          return new this.Catch({
            type: 'catch',
            args: args
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Unless() {
        var cacheKey = "Unless@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "unless") {
          result0 = "unless";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"unless\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base) {
        return (function() {
          return new this.Unless({
            type: 'unless',
            exp: base
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ArgumentList() {
        var cacheKey = "ArgumentList@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 40) {
          result0 = "(";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse__();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse__();
          }
          if (result1 !== null) {
            result2 = parse_List();
            if (result2 !== null) {
              result3 = [];
              result4 = parse__();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse__();
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 41) {
                  result4 = ")";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, args) {
        return (function() {
          return args;
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Template() {
        var cacheKey = "Template@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 8) === "template") {
          result0 = "template";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"template\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse__();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse__();
          }
          if (result1 !== null) {
            result2 = parse_Identifier();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base) {
        return (function() {
          return new this.Template({
            type: 'template',
            exp: base
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Render() {
        var cacheKey = "Render@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "render") {
          result0 = "render";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"render\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Identifier();
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              result4 = parse__();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse__();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (input.substr(pos.offset, 4) === "with") {
                  result4 = "with";
                  advance(pos, 4);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"with\"");
                  }
                }
                if (result4 !== null) {
                  result6 = parse__();
                  if (result6 !== null) {
                    result5 = [];
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse__();
                    }
                  } else {
                    result5 = null;
                  }
                  if (result5 !== null) {
                    result6 = parse_Statement();
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, st) {
              return (function() {
                return st;
              }).apply(__initializer);
              })(pos2.offset, pos2.line, pos2.column, result3[3]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, data) {
        return (function() {
          return new this.Render({
            type: 'render',
            name: name,
            data: data
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Module() {
        var cacheKey = "Module@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "module") {
          result0 = "module";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"module\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_ConstantIdentifier();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        return (function() {
          return new this.Module({
            type: 'module',
            name: name
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Mixin() {
        var cacheKey = "Mixin@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "mixin") {
          result0 = "mixin";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"mixin\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_ConstLookup();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        return (function() {
          return new this.Mixin({
            type: 'mixin',
            name: name
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Class() {
        var cacheKey = "Class@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "class") {
          result0 = "class";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"class\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_ConstantIdentifier();
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              result4 = parse__();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse__();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (input.substr(pos.offset, 7) === "extends") {
                  result4 = "extends";
                  advance(pos, 7);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"extends\"");
                  }
                }
                if (result4 !== null) {
                  result6 = parse__();
                  if (result6 !== null) {
                    result5 = [];
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse__();
                    }
                  } else {
                    result5 = null;
                  }
                  if (result5 !== null) {
                    result6 = parse_ConstLookup();
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, ext) {
              return (function() {
                return ext;
              }).apply(__initializer);
              })(pos2.offset, pos2.line, pos2.column, result3[3]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, ext) {
        return (function() {
          return new this.Class({
            type: 'class',
            name: name,
            "extends": ext
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_New() {
        var cacheKey = "New@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "new") {
          result0 = "new";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"new\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_ConstLookup();
            if (result2 !== null) {
              result3 = parse_ArgumentList();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, args) {
        return (function() {
          return new this.New({
            type: 'new',
            name: name,
            args: args
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Super() {
        var cacheKey = "Super@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "super") {
          result0 = "super";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"super\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          pos3 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_List();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          if (result1 !== null) {
            result1 = (function(offset, line, column, list) {
          return (function() {
            return list;
          }).apply(__initializer);
          })(pos2.offset, pos2.line, pos2.column, result1[1]);
          }
          if (result1 === null) {
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, list) {
        return (function() {
          return new this.Super({
            type: 'super',
            args: list
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Get() {
        var cacheKey = "Get@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "get") {
          result0 = "get";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"get\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Identifier();
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              if (input.charCodeAt(pos.offset) === 40) {
                result3 = "(";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse__();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse__();
                }
                if (result4 !== null) {
                  result5 = parse_Identifier();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse__();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse__();
                    }
                    if (result6 !== null) {
                      if (input.charCodeAt(pos.offset) === 41) {
                        result7 = ")";
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result7 !== null) {
                        result3 = [result3, result4, result5, result6, result7];
                      } else {
                        result3 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result3 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, name) {
              return (function() {
                return name;
              }).apply(__initializer);
              })(pos2.offset, pos2.line, pos2.column, result3[2]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base, name) {
        return (function() {
          return new this.Get({
            type: 'get',
            base: base,
            name: name
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Prop() {
        var cacheKey = "Prop@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "prop") {
          result0 = "prop";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"prop\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Identifier();
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              result4 = parse__();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse__();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = parse_Primary();
                if (result4 === null) {
                  result4 = parse_ArrayLiteral();
                  if (result4 === null) {
                    result4 = parse_ObjectLiteral();
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, value) {
              return (function() {
                return value;
              }).apply(__initializer);
              })(pos2.offset, pos2.line, pos2.column, result3[1]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base, value) {
        return (function() {
          return new this.Prop({
            type: 'prop',
            base: base,
            value: value
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Set() {
        var cacheKey = "Set@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "set") {
          result0 = "set";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"set\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Identifier();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 40) {
                result3 = "(";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse__();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse__();
                }
                if (result4 !== null) {
                  result5 = parse_Identifier();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse__();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse__();
                    }
                    if (result6 !== null) {
                      if (input.charCodeAt(pos.offset) === 41) {
                        result7 = ")";
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base, name) {
        return (function() {
          return new this.Set({
            type: 'set',
            base: base,
            name: name
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Def() {
        var cacheKey = "Def@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "def") {
          result0 = "def";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"def\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Identifier();
            if (result2 !== null) {
              result3 = parse_ArgumentList();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 33) {
                  result4 = "!";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"!\"");
                  }
                }
                if (result4 === null) {
                  if (input.charCodeAt(pos.offset) === 63) {
                    result4 = "?";
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"?\"");
                    }
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base, args) {
        return (function() {
          return new this.Def({
            type: 'def',
            base: base,
            args: args
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Contsructor() {
        var cacheKey = "Contsructor@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 15) === "def constructor") {
          result0 = "def constructor";
          advance(pos, 15);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"def constructor\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ArgumentList();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 33) {
              result2 = "!";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"!\"");
              }
            }
            if (result2 === null) {
              if (input.charCodeAt(pos.offset) === 63) {
                result2 = "?";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"?\"");
                }
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, args) {
        return (function() {
          return new this.Constructor({
            type: 'constructor',
            args: args
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Log() {
        var cacheKey = "Log@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "log") {
          result0 = "log";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"log\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_List();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base) {
        return (function() {
          return new this.Log({
            type: 'log',
            exp: base
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Dispose() {
        var cacheKey = "Dispose@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "dispose") {
          result0 = "dispose";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"dispose\"");
          }
        }
        if (result0 !== null) {
          result2 = parse__();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse__();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_LEFT();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base) {
        return (function() {
          return new this.Dispose({
            type: 'dispose',
            exp: base
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Event() {
        var cacheKey = "Event@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_LEFT();
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "::") {
            result1 = "::";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"::\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_Identifier();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 33) {
                result3 = "!";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!\"");
                }
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base, name, bound) {
        return (function() {
          return new this.Event({
            type: 'event',
            base: base,
            name: name,
            bound: bound
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Conditional() {
        var cacheKey = "Conditional@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_LEFT();
        if (result0 !== null) {
          result1 = [];
          result2 = parse__();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse__();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 63) {
              result2 = "?";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"?\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse__();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse__();
              }
              if (result3 !== null) {
                result4 = parse_Statement();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse__();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse__();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 58) {
                      result6 = ":";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse__();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse__();
                      }
                      if (result7 !== null) {
                        result8 = parse_Statement();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base, ts, fs) {
        return (function() {
          return new this.Conditional({
            type: 'conditional',
            base: base,
            ts: ts,
            fs: fs
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4], result0[8]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ArrayLiteral() {
        var cacheKey = "ArrayLiteral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_List();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 93) {
              result2 = "]";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, list) {
        return (function() {
          return new this.ArrayLiteral(list);
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_List() {
        var cacheKey = "List@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Statement();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          result2 = parse__();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse__();
          }
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            pos3 = clone(pos);
            if (input.charCodeAt(pos.offset) === 44) {
              result3 = ",";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result3 !== null) {
              result4 = [];
              result5 = parse__();
              while (result5 !== null) {
                result4.push(result5);
                result5 = parse__();
              }
              if (result4 !== null) {
                result5 = parse_Statement();
                if (result5 !== null) {
                  result6 = [];
                  result7 = parse__();
                  while (result7 !== null) {
                    result6.push(result7);
                    result7 = parse__();
                  }
                  if (result6 !== null) {
                    result3 = [result3, result4, result5, result6];
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
            } else {
              result3 = null;
              pos = clone(pos3);
            }
            if (result3 !== null) {
              result3 = (function(offset, line, column, tail) {
            return (function() {
              return tail;
            }).apply(__initializer);
            })(pos2.offset, pos2.line, pos2.column, result3[2]);
            }
            if (result3 === null) {
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              pos3 = clone(pos);
              if (input.charCodeAt(pos.offset) === 44) {
                result3 = ",";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse__();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse__();
                }
                if (result4 !== null) {
                  result5 = parse_Statement();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse__();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse__();
                    }
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, tail) {
              return (function() {
                return tail;
              }).apply(__initializer);
              })(pos2.offset, pos2.line, pos2.column, result3[2]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
        return (function() {
          return new this.List([head].concat(tail));
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_LEFT() {
        var cacheKey = "LEFT@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_MemberAccess();
        if (result0 === null) {
          result0 = parse_Primary();
          if (result0 === null) {
            result0 = parse_Selector();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Selector() {
        var cacheKey = "Selector@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_GlobalSelector();
        if (result0 === null) {
          result0 = parse_SelfSelector();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_GlobalSelector() {
        var cacheKey = "GlobalSelector@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 124) {
          result0 = "|";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"|\"");
          }
        }
        if (result0 !== null) {
          if (/^[^|]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^|]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^|]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^|]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 124) {
              result2 = "|";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"|\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, selector) {
        return (function() {
          return new this.Selector(selector.join(""));
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SelfSelector() {
        var cacheKey = "SelfSelector@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 92) {
          result0 = "\\";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result0 !== null) {
          if (/^[^\\]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\\\]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^\\]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\\\]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 92) {
              result2 = "\\";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, selector) {
        return (function() {
          return new this.Selector(selector.join(""), true);
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ObjectLiteral() {
        var cacheKey = "ObjectLiteral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 123) {
          result0 = "{";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse__();
          if (result2 === null) {
            if (input.charCodeAt(pos.offset) === 10) {
              result2 = "\n";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\n\"");
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse__();
            if (result2 === null) {
              if (input.charCodeAt(pos.offset) === 10) {
                result2 = "\n";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            pos3 = clone(pos);
            result3 = parse_String();
            if (result3 === null) {
              result3 = parse_Identifier();
            }
            if (result3 !== null) {
              result4 = [];
              result5 = parse__();
              while (result5 !== null) {
                result4.push(result5);
                result5 = parse__();
              }
              if (result4 !== null) {
                if (input.charCodeAt(pos.offset) === 58) {
                  result5 = ":";
                  advance(pos, 1);
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }
                if (result5 !== null) {
                  result6 = [];
                  result7 = parse__();
                  while (result7 !== null) {
                    result6.push(result7);
                    result7 = parse__();
                  }
                  if (result6 !== null) {
                    result7 = parse_Statement();
                    if (result7 !== null) {
                      result8 = [];
                      result9 = parse__();
                      if (result9 === null) {
                        if (input.charCodeAt(pos.offset) === 10) {
                          result9 = "\n";
                          advance(pos, 1);
                        } else {
                          result9 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\n\"");
                          }
                        }
                      }
                      while (result9 !== null) {
                        result8.push(result9);
                        result9 = parse__();
                        if (result9 === null) {
                          if (input.charCodeAt(pos.offset) === 10) {
                            result9 = "\n";
                            advance(pos, 1);
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\n\"");
                            }
                          }
                        }
                      }
                      if (result8 !== null) {
                        if (input.charCodeAt(pos.offset) === 44) {
                          result9 = ",";
                          advance(pos, 1);
                        } else {
                          result9 = null;
                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                        result9 = result9 !== null ? result9 : "";
                        if (result9 !== null) {
                          result10 = [];
                          result11 = parse__();
                          if (result11 === null) {
                            if (input.charCodeAt(pos.offset) === 10) {
                              result11 = "\n";
                              advance(pos, 1);
                            } else {
                              result11 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"\\n\"");
                              }
                            }
                          }
                          while (result11 !== null) {
                            result10.push(result11);
                            result11 = parse__();
                            if (result11 === null) {
                              if (input.charCodeAt(pos.offset) === 10) {
                                result11 = "\n";
                                advance(pos, 1);
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"\\n\"");
                                }
                              }
                            }
                          }
                          if (result10 !== null) {
                            result3 = [result3, result4, result5, result6, result7, result8, result9, result10];
                          } else {
                            result3 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result3 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result3 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result3 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
            } else {
              result3 = null;
              pos = clone(pos3);
            }
            if (result3 !== null) {
              result3 = (function(offset, line, column, key, value) {
            return (function() {
              return [key, value];
            }).apply(__initializer);
            })(pos2.offset, pos2.line, pos2.column, result3[0], result3[4]);
            }
            if (result3 === null) {
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = parse_String();
              if (result3 === null) {
                result3 = parse_Identifier();
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse__();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse__();
                }
                if (result4 !== null) {
                  if (input.charCodeAt(pos.offset) === 58) {
                    result5 = ":";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse__();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse__();
                    }
                    if (result6 !== null) {
                      result7 = parse_Statement();
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse__();
                        if (result9 === null) {
                          if (input.charCodeAt(pos.offset) === 10) {
                            result9 = "\n";
                            advance(pos, 1);
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\n\"");
                            }
                          }
                        }
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse__();
                          if (result9 === null) {
                            if (input.charCodeAt(pos.offset) === 10) {
                              result9 = "\n";
                              advance(pos, 1);
                            } else {
                              result9 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"\\n\"");
                              }
                            }
                          }
                        }
                        if (result8 !== null) {
                          if (input.charCodeAt(pos.offset) === 44) {
                            result9 = ",";
                            advance(pos, 1);
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\",\"");
                            }
                          }
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result10 = [];
                            result11 = parse__();
                            if (result11 === null) {
                              if (input.charCodeAt(pos.offset) === 10) {
                                result11 = "\n";
                                advance(pos, 1);
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"\\n\"");
                                }
                              }
                            }
                            while (result11 !== null) {
                              result10.push(result11);
                              result11 = parse__();
                              if (result11 === null) {
                                if (input.charCodeAt(pos.offset) === 10) {
                                  result11 = "\n";
                                  advance(pos, 1);
                                } else {
                                  result11 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"\\n\"");
                                  }
                                }
                              }
                            }
                            if (result10 !== null) {
                              result3 = [result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result3 = null;
                              pos = clone(pos3);
                            }
                          } else {
                            result3 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result3 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result3 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result3 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, key, value) {
              return (function() {
                return [key, value];
              }).apply(__initializer);
              })(pos2.offset, pos2.line, pos2.column, result3[0], result3[4]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 125) {
                result3 = "}";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"}\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, obj) {
        return (function() {
          var item, ret, _i, _len;
          ret = new this.Obj;
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            item = obj[_i];
            ret[item[0]] = item[1];
          }
          return ret;
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Iteration() {
        var cacheKey = "Iteration@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ArrayLiteral();
        if (result0 === null) {
          result0 = parse_ObjectLiteral();
          if (result0 === null) {
            result0 = parse_MemberAccess();
            if (result0 === null) {
              result0 = parse_Primary();
            }
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse__();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse__();
          }
          if (result1 !== null) {
            result2 = parse_ArgumentList();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = [];
              result4 = parse__();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse__();
              }
              if (result3 !== null) {
                if (input.substr(pos.offset, 2) === "&&") {
                  result4 = "&&";
                  advance(pos, 2);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"&&\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse__();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse__();
                  }
                  if (result5 !== null) {
                    result6 = parse_Statement();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, obj, callbackArgs, statement) {
        return (function() {
          return new this.Iteration({
            type: 'iteration',
            base: obj,
            statement: statement,
            callbackArgs: callbackArgs
          });
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Operator() {
        var cacheKey = "Operator@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos.offset, 2) === "==") {
          result0 = "==";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"==\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "*~") {
            result0 = "*~";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"*~\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 2) === "*+") {
              result0 = "*+";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"*+\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === "*-") {
                result0 = "*-";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*-\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 2) === "+=") {
                  result0 = "+=";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"+=\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 4) === "isnt") {
                    result0 = "isnt";
                    advance(pos, 4);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"isnt\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 2) === "is") {
                      result0 = "is";
                      advance(pos, 2);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"is\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos.offset) === 61) {
                        result0 = "=";
                        advance(pos, 1);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"=\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 2) === "<<") {
                          result0 = "<<";
                          advance(pos, 2);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"<<\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos.offset) === 43) {
                            result0 = "+";
                            advance(pos, 1);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"+\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos.offset) === 45) {
                              result0 = "-";
                              advance(pos, 1);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"-\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos.offset, 2) === "*=") {
                                result0 = "*=";
                                advance(pos, 2);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"*=\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.charCodeAt(pos.offset) === 42) {
                                  result0 = "*";
                                  advance(pos, 1);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"*\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos.offset, 3) === "and") {
                                    result0 = "and";
                                    advance(pos, 3);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"and\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.charCodeAt(pos.offset) === 62) {
                                      result0 = ">";
                                      advance(pos, 1);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\">\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.charCodeAt(pos.offset) === 37) {
                                        result0 = "%";
                                        advance(pos, 1);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"%\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.charCodeAt(pos.offset) === 47) {
                                          result0 = "/";
                                          advance(pos, 1);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"/\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.charCodeAt(pos.offset) === 124) {
                                            result0 = "|";
                                            advance(pos, 1);
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"|\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos.offset, 2) === "or") {
                                              result0 = "or";
                                              advance(pos, 2);
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"or\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos.offset, 2) === "&=") {
                                                result0 = "&=";
                                                advance(pos, 2);
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"&=\"");
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Literal() {
        var cacheKey = "Literal@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_Boolean();
        if (result0 === null) {
          result0 = parse_Null();
          if (result0 === null) {
            result0 = parse_Unit();
            if (result0 === null) {
              result0 = parse_Number();
              if (result0 === null) {
                result0 = parse_Color();
                if (result0 === null) {
                  result0 = parse_String();
                  if (result0 === null) {
                    result0 = parse_Element();
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Null() {
        var cacheKey = "Null@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "null") {
          result0 = "null";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"null\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
        return (function() {
          return new this.Null;
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Element() {
        var cacheKey = "Element@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 37) {
          result0 = "%";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"%\"");
          }
        }
        if (result0 !== null) {
          if (/^[a-zA-Z0-9.#&%~!\-]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z0-9.#&%~!\\-]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[a-zA-Z0-9.#&%~!\-]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-zA-Z0-9.#&%~!\\-]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ElementAttribute();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ElementAttribute();
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse__();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse__();
              }
              if (result3 !== null) {
                result4 = parse_Statement();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, zen, attributes, text) {
        return (function() {
          return new this.Element(zen.join(""), attributes, text);
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ElementAttribute() {
        var cacheKey = "ElementAttribute@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          if (/^[a-zA-Z\-_]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z\\-_]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[a-zA-Z\-_]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-zA-Z\\-_]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 61) {
              result2 = "=";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result2 !== null) {
              if (/^[^\]]/.test(input.charAt(pos.offset))) {
                result4 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\]]");
                }
              }
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  if (/^[^\]]/.test(input.charAt(pos.offset))) {
                    result4 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^\\]]");
                    }
                  }
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 93) {
                  result4 = "]";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, key, value) {
        return (function() {
          return {
            key: key.join(""),
            value: value.join("")
          };
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_String() {
        var cacheKey = "String@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_SingleQuotedString();
        if (result0 === null) {
          result0 = parse_DoubleQuotedString();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_DoubleQuotedString() {
        var cacheKey = "DoubleQuotedString@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^']/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^']");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^']/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^']");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 39) {
              result2 = "'";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) {
        return (function() {
          return value.join("");
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SingleQuotedString() {
        var cacheKey = "SingleQuotedString@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^"]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\"]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^"]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\"]");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 34) {
              result2 = "\"";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) {
        return (function() {
          return value.join("");
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Boolean() {
        var cacheKey = "Boolean@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "true") {
          result0 = "true";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 5) === "false") {
            result0 = "false";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) {
        return (function() {
          return value === 'true';
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Color() {
        var cacheKey = "Color@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_HexColor();
        if (result0 === null) {
          result0 = parse_RgbColor();
          if (result0 === null) {
            result0 = parse_HslColor();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, color) {
        return (function() {
          return new this.Color(color);
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_HexColor() {
        var cacheKey = "HexColor@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Hex6Digit();
          if (result1 === null) {
            result1 = parse_Hex3Digit();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) {
        return (function() {
          return "#" + value.join("");
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Hex3Digit() {
        var cacheKey = "Hex3Digit@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_HexDigit();
        if (result0 !== null) {
          result1 = parse_HexDigit();
          if (result1 !== null) {
            result2 = parse_HexDigit();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Hex6Digit() {
        var cacheKey = "Hex6Digit@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_HexDigit();
        if (result0 !== null) {
          result1 = parse_HexDigit();
          if (result1 !== null) {
            result2 = parse_HexDigit();
            if (result2 !== null) {
              result3 = parse_HexDigit();
              if (result3 !== null) {
                result4 = parse_HexDigit();
                if (result4 !== null) {
                  result5 = parse_HexDigit();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_HexDigit() {
        var cacheKey = "HexDigit@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[a-f0-9]/i.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-f0-9]i");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_RgbColor() {
        var cacheKey = "RgbColor@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "rgb") {
          result0 = "rgb";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"rgb\"");
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 97) {
            result1 = "a";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"a\"");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 40) {
              result2 = "(";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse__();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse__();
              }
              if (result3 !== null) {
                result4 = parse_Integer();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse__();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse__();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 44) {
                      result6 = ",";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse__();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse__();
                      }
                      if (result7 !== null) {
                        result8 = parse_Integer();
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse__();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse__();
                          }
                          if (result9 !== null) {
                            if (input.charCodeAt(pos.offset) === 44) {
                              result10 = ",";
                              advance(pos, 1);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\",\"");
                              }
                            }
                            if (result10 !== null) {
                              result11 = [];
                              result12 = parse__();
                              while (result12 !== null) {
                                result11.push(result12);
                                result12 = parse__();
                              }
                              if (result11 !== null) {
                                result12 = parse_Integer();
                                if (result12 !== null) {
                                  result13 = [];
                                  result14 = parse__();
                                  while (result14 !== null) {
                                    result13.push(result14);
                                    result14 = parse__();
                                  }
                                  if (result13 !== null) {
                                    pos2 = clone(pos);
                                    pos3 = clone(pos);
                                    if (input.charCodeAt(pos.offset) === 44) {
                                      result14 = ",";
                                      advance(pos, 1);
                                    } else {
                                      result14 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\",\"");
                                      }
                                    }
                                    if (result14 !== null) {
                                      result15 = [];
                                      result16 = parse__();
                                      while (result16 !== null) {
                                        result15.push(result16);
                                        result16 = parse__();
                                      }
                                      if (result15 !== null) {
                                        result16 = parse_Number();
                                        if (result16 !== null) {
                                          result17 = [];
                                          result18 = parse__();
                                          while (result18 !== null) {
                                            result17.push(result18);
                                            result18 = parse__();
                                          }
                                          if (result17 !== null) {
                                            result14 = [result14, result15, result16, result17];
                                          } else {
                                            result14 = null;
                                            pos = clone(pos3);
                                          }
                                        } else {
                                          result14 = null;
                                          pos = clone(pos3);
                                        }
                                      } else {
                                        result14 = null;
                                        pos = clone(pos3);
                                      }
                                    } else {
                                      result14 = null;
                                      pos = clone(pos3);
                                    }
                                    if (result14 !== null) {
                                      result14 = (function(offset, line, column, alpha) {
                                    return (function() {
                                      return alpha;
                                    }).apply(__initializer);
                                    })(pos2.offset, pos2.line, pos2.column, result14[2]);
                                    }
                                    if (result14 === null) {
                                      pos = clone(pos2);
                                    }
                                    result14 = result14 !== null ? result14 : "";
                                    if (result14 !== null) {
                                      if (input.charCodeAt(pos.offset) === 41) {
                                        result15 = ")";
                                        advance(pos, 1);
                                      } else {
                                        result15 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\")\"");
                                        }
                                      }
                                      if (result15 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, red, blue, green, alpha) {
        return (function() {
          if (a) {
            return 'rgba(' + [red, green, blue, alpha].join(",") + ')';
          } else {
            return 'rgb(' + [red, green, blue].join(",") + ')';
          }
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[4], result0[8], result0[12], result0[14]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_HslColor() {
        var cacheKey = "HslColor@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "hsl") {
          result0 = "hsl";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"hsl\"");
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 97) {
            result1 = "a";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"a\"");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 40) {
              result2 = "(";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse__();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse__();
              }
              if (result3 !== null) {
                result4 = parse_Integer();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse__();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse__();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 44) {
                      result6 = ",";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse__();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse__();
                      }
                      if (result7 !== null) {
                        result8 = parse_Number();
                        if (result8 !== null) {
                          if (input.charCodeAt(pos.offset) === 37) {
                            result9 = "%";
                            advance(pos, 1);
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"%\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = [];
                            result11 = parse__();
                            while (result11 !== null) {
                              result10.push(result11);
                              result11 = parse__();
                            }
                            if (result10 !== null) {
                              if (input.charCodeAt(pos.offset) === 44) {
                                result11 = ",";
                                advance(pos, 1);
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\",\"");
                                }
                              }
                              if (result11 !== null) {
                                result12 = [];
                                result13 = parse__();
                                while (result13 !== null) {
                                  result12.push(result13);
                                  result13 = parse__();
                                }
                                if (result12 !== null) {
                                  result13 = parse_Number();
                                  if (result13 !== null) {
                                    if (input.charCodeAt(pos.offset) === 37) {
                                      result14 = "%";
                                      advance(pos, 1);
                                    } else {
                                      result14 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"%\"");
                                      }
                                    }
                                    if (result14 !== null) {
                                      result15 = [];
                                      result16 = parse__();
                                      while (result16 !== null) {
                                        result15.push(result16);
                                        result16 = parse__();
                                      }
                                      if (result15 !== null) {
                                        pos2 = clone(pos);
                                        pos3 = clone(pos);
                                        if (input.charCodeAt(pos.offset) === 44) {
                                          result16 = ",";
                                          advance(pos, 1);
                                        } else {
                                          result16 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\",\"");
                                          }
                                        }
                                        if (result16 !== null) {
                                          result17 = [];
                                          result18 = parse__();
                                          while (result18 !== null) {
                                            result17.push(result18);
                                            result18 = parse__();
                                          }
                                          if (result17 !== null) {
                                            result18 = parse_Number();
                                            if (result18 !== null) {
                                              result19 = [];
                                              result20 = parse__();
                                              while (result20 !== null) {
                                                result19.push(result20);
                                                result20 = parse__();
                                              }
                                              if (result19 !== null) {
                                                result16 = [result16, result17, result18, result19];
                                              } else {
                                                result16 = null;
                                                pos = clone(pos3);
                                              }
                                            } else {
                                              result16 = null;
                                              pos = clone(pos3);
                                            }
                                          } else {
                                            result16 = null;
                                            pos = clone(pos3);
                                          }
                                        } else {
                                          result16 = null;
                                          pos = clone(pos3);
                                        }
                                        if (result16 !== null) {
                                          result16 = (function(offset, line, column, alpha) {
                                        return (function() {
                                          return alpha;
                                        }).apply(__initializer);
                                        })(pos2.offset, pos2.line, pos2.column, result16[2]);
                                        }
                                        if (result16 === null) {
                                          pos = clone(pos2);
                                        }
                                        result16 = result16 !== null ? result16 : "";
                                        if (result16 !== null) {
                                          if (input.charCodeAt(pos.offset) === 41) {
                                            result17 = ")";
                                            advance(pos, 1);
                                          } else {
                                            result17 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\")\"");
                                            }
                                          }
                                          if (result17 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17];
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, hue, saturation, lightness, alpha) {
        return (function() {
          if (a) {
            return "hsla(" + hue + "," + saturation + "%," + lightness + "%," + alpha + ")";
          } else {
            return "hsl(" + hue + "," + saturation + "%," + lightness + "%)";
          }
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[4], result0[8], result0[13], result0[16]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Unit() {
        var cacheKey = "Unit@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Number();
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "px") {
            result1 = "px";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"px\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos.offset, 2) === "em") {
              result1 = "em";
              advance(pos, 2);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"em\"");
              }
            }
            if (result1 === null) {
              if (input.substr(pos.offset, 3) === "deg") {
                result1 = "deg";
                advance(pos, 3);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"deg\"");
                }
              }
              if (result1 === null) {
                if (input.substr(pos.offset, 3) === "rad") {
                  result1 = "rad";
                  advance(pos, 3);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"rad\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos.offset) === 115) {
                    result1 = "s";
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"s\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.substr(pos.offset, 2) === "ms") {
                      result1 = "ms";
                      advance(pos, 2);
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"ms\"");
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value, type) {
        return (function() {
          return new this.Unit(value, type);
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Number() {
        var cacheKey = "Number@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_Float();
        if (result0 === null) {
          result0 = parse_Integer();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Float() {
        var cacheKey = "Float@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, start, end) {
        return (function() {
          return parseFloat(start.join("") + "." + end.join(""));
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Integer() {
        var cacheKey = "Integer@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) {
        return (function() {
          return parseInt(value.join(""));
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Identifier() {
        var cacheKey = "Identifier@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[a-z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]");
          }
        }
        if (result0 !== null) {
          if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-zA-Z0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
        return (function() {
          return head + tail.join("");
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstantIdentifier() {
        var cacheKey = "ConstantIdentifier@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[A-Z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        if (result0 !== null) {
          if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-zA-Z0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
        return (function() {
          return head + tail.join("");
        }).apply(__initializer);
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_EOF() {
        var cacheKey = "EOF@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        reportFailures++;
        if (/^[\n\r\u2028\u2029]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r\\u2028\\u2029]");
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("New Line");
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = "_@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        
        reportFailures++;
        if (/^[\t\x0B\f \xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[\\t\\x0B\\f \\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[\t\x0B\f \xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[\\t\\x0B\\f \\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]");
              }
            }
          }
        } else {
          result0 = null;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("Whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse___() {
        var cacheKey = "__@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[^\n\r\u2028\u2029\t\x0B\f \xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[^\\n\\r\\u2028\\u2029\\t\\x0B\\f \\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      var __initializer;
      
      __initializer = (function() {
        var key, p, path, value, _ref;
        if (typeof exports === 'undefined') {
          p = 'classes';
        } else {
          path = require('path');
          p = path.resolve(__dirname, "../../../lib/classes.coffee");
        }
        _ref = require(p);
        for (key in _ref) {
          value = _ref[key];
          this[key] = value;
        }
        this.tree = new this.Tree;
        return this;
      }).call({});
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})()
}

;(function(){
require=(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0](function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({"./classes/literals":[function(require,module,exports){
module.exports=require('mtchZG');
},{}],"mtchZG":[function(require,module,exports){
(function() {
  var Color, Element, Json, Literal, Null, Selector, Unit, Variable,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Null = Null = (function() {
    function Null() {}

    Null.prototype.compile = function() {
      return "null";
    };

    Null.prototype.toString = function() {
      return "null";
    };

    return Null;

  })();

  module.exports.Literal = Literal = (function() {
    function Literal(value) {
      this.value = value;
    }

    Literal.prototype.compile = function() {
      if (this.value === "self") {
        return "this";
      }
      if (this.value === 'true' || this.value === 'false') {
        return this.value;
      }
      if (typeof this.value === 'string') {
        return '"' + this.value.replace(/"/g, '\\"') + '"';
      }
      return this.value;
    };

    return Literal;

  })();

  module.exports.Color = Color = (function(_super) {
    __extends(Color, _super);

    function Color(value) {
      this.value = value;
    }

    Color.prototype.compile = function() {
      return "'" + this.value + "'";
    };

    return Color;

  })(Literal);

  module.exports.Json = Json = (function(_super) {
    __extends(Json, _super);

    function Json(exp) {
      this.exp = exp;
    }

    Json.prototype.compile = function() {
      return "__json__(" + (this.exp.compile()) + ")";
    };

    return Json;

  })(Literal);

  module.exports.Selector = Selector = (function(_super) {
    __extends(Selector, _super);

    function Selector(selector, self) {
      this.selector = selector;
      this.self = self;
    }

    Selector.prototype.compile = function() {
      if (this.self) {
        return "__selector__('" + this.selector + "', this)";
      } else {
        return "__selector__('" + this.selector + "')";
      }
    };

    return Selector;

  })(Literal);

  module.exports.Unit = Unit = (function(_super) {
    __extends(Unit, _super);

    function Unit(value, type) {
      this.value = value;
      this.type = type;
    }

    Unit.prototype.compile = function() {
      if (this.type === 'em') {
        return this.value * 16;
      }
      if (this.type === 's') {
        return this.value * 1000;
      }
      return this.value;
    };

    return Unit;

  })(Literal);

  module.exports.Element = Element = (function(_super) {
    __extends(Element, _super);

    function Element(zen, attributes, text) {
      var item, _i, _len;

      this.zen = zen;
      this.text = text;
      this.attributes = {};
      this.statements = [];
      for (_i = 0, _len = attributes.length; _i < _len; _i++) {
        item = attributes[_i];
        this.attributes[item.key] = item.value;
      }
    }

    Element.prototype.compile = function() {
      var elements, s, text, _i, _len, _ref;

      text = this.text ? this.text.compile() : '""';
      elements = [];
      if (this.statements) {
        _ref = this.statements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          elements.push(s.compile());
        }
      }
      return '__element__("' + this.zen + '", ' + JSON.stringify(this.attributes) + ', ' + text + ', [' + elements.join(", ") + '])';
    };

    return Element;

  })(Literal);

  module.exports.Variable = Variable = (function(_super) {
    __extends(Variable, _super);

    function Variable(name, self) {
      this.name = name;
      this.self = self;
    }

    Variable.prototype.compile = function() {
      if (this.self) {
        return "@" + this.name;
      } else {
        return this.name;
      }
    };

    return Variable;

  })(Literal);

}).call(this);


},{}],"./classes/lists":[function(require,module,exports){
module.exports=require('aqxse8');
},{}],"aqxse8":[function(require,module,exports){
(function() {
  var ArrayLiteral, List, Obj,
    __hasProp = {}.hasOwnProperty;

  module.exports.List = List = (function() {
    function List(base) {
      this.base = base;
    }

    List.prototype.compile = function() {
      var data, item;

      data = (function() {
        var _i, _len, _ref, _results;

        _ref = this.base.compact(true);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(item.compile());
        }
        return _results;
      }).call(this);
      return data.join(", ");
    };

    return List;

  })();

  module.exports.ArrayLiteral = ArrayLiteral = (function() {
    function ArrayLiteral(base) {
      this.base = base;
    }

    ArrayLiteral.prototype.compile = function() {
      return "[" + this.base.compile() + "]";
    };

    return ArrayLiteral;

  })();

  module.exports.Obj = Obj = (function() {
    function Obj() {}

    Obj.prototype.compile = function() {
      var data, key, value;

      data = (function() {
        var _results;

        _results = [];
        for (key in this) {
          if (!__hasProp.call(this, key)) continue;
          value = this[key];
          _results.push(("" + key + ": ") + (value.compile()));
        }
        return _results;
      }).call(this);
      return "{" + data.join(", ") + "}";
    };

    return Obj;

  })();

}).call(this);


},{}],"./classes/accessors":[function(require,module,exports){
module.exports=require('i6TEWu');
},{}],"i6TEWu":[function(require,module,exports){
(function() {
  var Acessor, MemberAccessor;

  module.exports.Accessor = Acessor = (function() {
    function Acessor(type, name) {
      this.type = type;
      this.name = name;
    }

    return Acessor;

  })();

  module.exports.MemberAccessor = MemberAccessor = (function() {
    function MemberAccessor(base, data) {
      this.base = base;
      this.data = data;
    }

    MemberAccessor.prototype.compile = function() {
      var base, s;

      base = this.base.compile();
      s = (function() {
        switch (this.data.type) {
          case "style":
            if (this.base instanceof Selector) {
              return base + ".style('" + this.data.name.camelize(false) + "').value";
            } else {
              return "__css__(" + base + ", '" + (this.data.name.camelize(false)) + "').value";
            }
            break;
          case "attribute":
            return "__attribute__(" + base + ", '" + this.data.name + "').value";
          case "property":
            if (this.base instanceof Selector) {
              exports.parent.AddSelectorProperty(this.data.name);
            }
            return base + "?." + this.data.name;
          case "alt-property":
            return base + "[" + this.data.name.compile() + "]";
        }
      }).call(this);
      if (this.self) {
        s = "@" + s;
      }
      return s;
    };

    return MemberAccessor;

  })();

}).call(this);


},{}],"./classes/statement":[function(require,module,exports){
module.exports=require('7RnXDg');
},{}],"7RnXDg":[function(require,module,exports){
(function() {
  var Statement;

  module.exports.Statement = Statement = (function() {
    function Statement(props) {
      var key, value;

      for (key in props) {
        value = props[key];
        this[key] = value;
      }
    }

    Statement.prototype.toString = function() {
      return "<" + this.__proto__.constructor.name + (" " + this.type + " #" + this.line + ":" + this.column + ">");
    };

    Statement.prototype.compileBlock = function(s, indent) {
      var c, i, line, st, _i, _j, _len, _len1, _ref;

      if (indent == null) {
        indent = true;
      }
      c = [];
      if (s.statements) {
        _ref = s.statements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          st = _ref[_i];
          c.push(st.compile());
        }
      }
      if (indent) {
        for (i = _j = 0, _len1 = c.length; _j < _len1; i = ++_j) {
          line = c[i];
          c[i] = line.replace(/^/gm, '  ');
        }
      }
      return c.join("\n");
    };

    Statement.prototype.lookupClassPath = function(s) {
      var c, parent;

      c = [];
      parent = s.parent;
      while (parent.type === 'module') {
        c.push(parent.name);
        parent = parent.parent;
      }
      c.reverse();
      c.push(s.name);
      return c.join(".");
    };

    Statement.prototype.inType = function(type) {
      return this.parent.type === type;
    };

    Statement.prototype.inExtends = function() {
      if (!this.inClass()) {
        return false;
      }
      return !!this.parent["extends"];
    };

    Statement.prototype.inModule = function() {
      return this.inType('module');
    };

    Statement.prototype.inClass = function() {
      return this.inType('class');
    };

    Statement.prototype.inDef = function() {
      return this.inType('def');
    };

    Statement.prototype["throw"] = function() {
      throw new NotSupportedStatementError(this.parent, this, true);
    };

    return Statement;

  })();

}).call(this);


},{}],"./classes/method":[function(require,module,exports){
module.exports=require('a4KN4S');
},{}],"a4KN4S":[function(require,module,exports){
(function() {
  var Method,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Method = Method = (function(_super) {
    __extends(Method, _super);

    function Method() {
      Method.__super__.constructor.apply(this, arguments);
      this.statements = [];
    }

    return Method;

  })(Statement);

}).call(this);


},{}],"./classes/statements/call":[function(require,module,exports){
module.exports=require('cpk5Sk');
},{}],"cpk5Sk":[function(require,module,exports){
(function() {
  var Call,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Call = Call = (function(_super) {
    __extends(Call, _super);

    function Call() {
      Call.__super__.constructor.apply(this, arguments);
      this.statements = [];
    }

    Call.prototype.compile = function() {
      var args, block, c, cbargs, _ref;

      args = this.args instanceof List ? this.args.compile() : this.args;
      if (!!this.callback || this.statements.length > 0) {
        block = this.compileBlock(this);
        if ((_ref = this.callback) != null ? _ref.compile : void 0) {
          block = (this.callback.compile()).replace(/^/gm, '  ') + "\n" + block;
        }
        if (this.callbackArgs) {
          cbargs = "(" + (this.callbackArgs.compile()) + ")";
        } else {
          cbargs = "";
        }
        if (args === "") {
          args += "" + cbargs + "->";
        } else {
          args += ", " + cbargs + "->";
        }
      }
      if (args === "!" || args === "?" || args === "") {
        return this.exp.compile() + "()";
      }
      c = "(" + this.exp.compile() + " " + args;
      if (this.callback || this.statements.length > 0) {
        c += "\n" + block;
      }
      return c += ")";
    };

    return Call;

  })(Statement);

}).call(this);


},{}],"./classes/statements/class":[function(require,module,exports){
module.exports=require('z1i/zV');
},{}],"z1i/zV":[function(require,module,exports){
(function() {
  var Class,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Class = Class = (function(_super) {
    __extends(Class, _super);

    function Class() {
      Class.__super__.constructor.apply(this, arguments);
      this.statements = [];
    }

    Class.prototype.validateStatement = function(s) {
      if (!s.type) {
        return false;
      }
      return ['def', 'get', 'set', 'const', 'prop', 'constructor', 'mixin'].indexOf(s.type) !== -1;
    };

    Class.prototype.compile = function() {
      var code;

      exports.parent.Classes.push(this.lookupClassPath(this));
      if (this["extends"]) {
        return code = ("class " + (this.lookupClassPath(this)) + " extends " + this["extends"].name + "\n") + this.compileBlock(this);
      } else {
        return code = ("class " + (this.lookupClassPath(this)) + "\n") + this.compileBlock(this);
      }
    };

    return Class;

  })(Statement);

}).call(this);


},{}],"./classes/statements/conditional":[function(require,module,exports){
module.exports=require('L8JXdy');
},{}],"L8JXdy":[function(require,module,exports){
(function() {
  var Conditional, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Conditional = Conditional = (function(_super) {
    __extends(Conditional, _super);

    function Conditional() {
      _ref = Conditional.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Conditional.prototype.compile = function() {
      return "if " + this.base.compile() + " then " + this.ts.compile() + " else " + this.fs.compile();
    };

    return Conditional;

  })(Statement);

}).call(this);


},{}],"./classes/statements/dispose":[function(require,module,exports){
module.exports=require('Kb1pPq');
},{}],"Kb1pPq":[function(require,module,exports){
(function() {
  var Dispose, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Dispose = Dispose = (function(_super) {
    __extends(Dispose, _super);

    function Dispose() {
      _ref = Dispose.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Dispose.prototype.compile = function() {
      var base;

      base = this.exp.compile();
      return base + ".parentNode.removeChild " + base;
    };

    return Dispose;

  })(Statement);

}).call(this);


},{}],"./classes/statements/group":[function(require,module,exports){
module.exports=require('H3LsEA');
},{}],"H3LsEA":[function(require,module,exports){
(function() {
  var Group, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Group = Group = (function(_super) {
    __extends(Group, _super);

    function Group() {
      _ref = Group.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Group.prototype.compile = function() {
      return "(" + this.exp.compile() + ")";
    };

    return Group;

  })(Statement);

}).call(this);


},{}],"./classes/statements/include":[function(require,module,exports){
module.exports=require('G37udo');
},{}],"G37udo":[function(require,module,exports){
(function() {
  var Include, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Include = Include = (function(_super) {
    __extends(Include, _super);

    function Include() {
      _ref = Include.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Include.prototype.compile = function() {
      return exports.parent.compileFile(this.exp, this.root.path, false, false);
    };

    return Include;

  })(Statement);

}).call(this);


},{}],"./classes/statements/log":[function(require,module,exports){
module.exports=require('5zbor5');
},{}],"5zbor5":[function(require,module,exports){
(function() {
  var Log, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Log = Log = (function(_super) {
    __extends(Log, _super);

    function Log() {
      _ref = Log.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Log.prototype.compile = function() {
      var args;

      args = this.exp instanceof List ? this.exp.compile() : "";
      return "console.log " + args;
    };

    return Log;

  })(Statement);

}).call(this);


},{}],"./classes/statements/module":[function(require,module,exports){
module.exports=require('npi815');
},{}],"npi815":[function(require,module,exports){
(function() {
  var Module, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Module = Module = (function(_super) {
    __extends(Module, _super);

    function Module() {
      Module.__super__.constructor.apply(this, arguments);
      this.statements = [];
    }

    Module.prototype.validateStatement = function(s) {
      if (!s.type) {
        return false;
      }
      return ['def', 'mixin', 'class'].indexOf(s.type) !== -1;
    };

    Module.prototype.compile = function() {
      exports.parent.Modules.push(this.lookupClassPath(this));
      return this.compileBlock(this, false);
    };

    return Module;

  })(Statement);

  module.exports.Mixin = Module = (function(_super) {
    __extends(Module, _super);

    function Module() {
      _ref = Module.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Module.prototype.compile = function() {
      var path;

      if (this.parent.type === 'module') {
        path = this.lookupClassPath(this.parent);
        return "" + path + ".mixin " + (this.name.compile());
      } else {
        return "@mixin " + (this.name.compile());
      }
    };

    return Module;

  })(Statement);

}).call(this);


},{}],"./classes/statements/new":[function(require,module,exports){
module.exports=require('7WRPDX');
},{}],"7WRPDX":[function(require,module,exports){
(function() {
  var New, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.New = New = (function(_super) {
    __extends(New, _super);

    function New() {
      _ref = New.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    New.prototype.compile = function() {
      var args;

      args = this.args instanceof List ? this.args.compile() : "";
      return "new " + this.name.name + "(" + args + ")";
    };

    return New;

  })(Statement);

}).call(this);


},{}],"./classes/statements/prop":[function(require,module,exports){
module.exports=require('jyqe0i');
},{}],"jyqe0i":[function(require,module,exports){
(function() {
  var Prop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Prop = Prop = (function(_super) {
    __extends(Prop, _super);

    function Prop() {
      _ref = Prop.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Prop.prototype.compile = function() {
      var ret;

      if (!this.inClass()) {
        this["throw"]();
      }
      ret = "@prop '" + this.base + "'";
      if (!!this.value) {
        ret += ", " + this.value.compile();
      }
      return ret;
    };

    return Prop;

  })(Statement);

}).call(this);


},{}],"./classes/statements/operation":[function(require,module,exports){
module.exports=require('MdyWuv');
},{}],"MdyWuv":[function(require,module,exports){
(function() {
  var Operation, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Operation = Operation = (function(_super) {
    __extends(Operation, _super);

    function Operation() {
      _ref = Operation.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Operation.prototype.compile = function() {
      switch (this.operator) {
        case "&=":
          return "Object.merge(" + (this.left.compile()) + "," + (this.right.compile()) + ")";
        case "*~":
          return this.left.compile() + ("?.classList?.toggle(" + (this.right.compile()) + ")");
        case "*+":
          return this.left.compile() + ("?.classList?.add(" + (this.right.compile()) + ")");
        case "*-":
          return this.left.compile() + ("?.classList?.remove(" + (this.right.compile()) + ")");
        case "<<":
          return this.left.compile() + "?.appendChild(" + this.right.compile() + ")";
        default:
          return this.left.compile() + (" " + this.operator + " ") + this.right.compile();
      }
    };

    return Operation;

  })(Statement);

}).call(this);


},{}],"./classes/statements/render":[function(require,module,exports){
module.exports=require('3+5p7h');
},{}],"3+5p7h":[function(require,module,exports){
(function() {
  var Render, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Render = Render = (function(_super) {
    __extends(Render, _super);

    function Render() {
      _ref = Render.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Render.prototype.compile = function() {
      if (this.data) {
        return "__render__('" + this.name + "', " + (this.data.compile()) + ")";
      } else {
        return "__render__('" + this.name + "')";
      }
    };

    return Render;

  })(Statement);

}).call(this);


},{}],"./classes/statements/super":[function(require,module,exports){
module.exports=require('Qct0xJ');
},{}],"Qct0xJ":[function(require,module,exports){
(function() {
  var Super, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Super = Super = (function(_super) {
    __extends(Super, _super);

    function Super() {
      _ref = Super.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Super.prototype.compile = function() {
      if (!((this.inDef() || this.inType('constructor')) && this.parent.inClass() && this.parent.inExtends())) {
        this["throw"]();
      }
      return "super";
    };

    return Super;

  })(Statement);

}).call(this);


},{}],"./classes/statements/template":[function(require,module,exports){
module.exports=require('Evfwnb');
},{}],"Evfwnb":[function(require,module,exports){
(function() {
  var Template,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Template = Template = (function(_super) {
    __extends(Template, _super);

    function Template() {
      Template.__super__.constructor.apply(this, arguments);
      this.statements = [];
    }

    Template.prototype.validateStatement = function(s) {
      return s instanceof Element;
    };

    Template.prototype.compile = function() {
      var elements, st, _i, _len, _ref;

      elements = [];
      _ref = this.statements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        st = _ref[_i];
        elements.push(st.compile());
      }
      return "__template__('" + this.exp + "',[" + (elements.join(', ')) + "])";
    };

    return Template;

  })(Statement);

}).call(this);


},{}],"./classes/methods/await":[function(require,module,exports){
module.exports=require('lzsBH6');
},{}],"lzsBH6":[function(require,module,exports){
(function() {
  var Await,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Await = Await = (function(_super) {
    __extends(Await, _super);

    function Await() {
      Await.__super__.constructor.apply(this, arguments);
      this.statements = [];
    }

    Await.prototype.translateAsync = function(s) {
      var firstSt, i, st, _i, _len, _ref;

      _ref = s.statements;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        st = _ref[i];
        if (st.statements != null) {
          firstSt = st;
          break;
        }
      }
      if (firstSt) {
        firstSt.statements = firstSt.statements.concat(s.statements.splice(i + 1));
        return this.translateAsync(st);
      } else {
        return s;
      }
    };

    Await.prototype.compile = function() {
      this.translateAsync(this);
      return this.compileBlock(this, false);
    };

    return Await;

  })(Method);

}).call(this);


},{}],"./classes/methods/constructor":[function(require,module,exports){
module.exports=require('qYcsIe');
},{}],"qYcsIe":[function(require,module,exports){
(function() {
  var Constructor, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Constructor = Constructor = (function(_super) {
    __extends(Constructor, _super);

    function Constructor() {
      _ref = Constructor.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Constructor.prototype.compile = function() {
      var args;

      if (!this.inClass()) {
        this["throw"];
      }
      args = this.args instanceof List ? this.args.compile() : "";
      return ("constructor: (" + args + ") ->\n") + this.compileBlock(this);
    };

    return Constructor;

  })(Method);

}).call(this);


},{}],"./classes/methods/def":[function(require,module,exports){
module.exports=require('XzjvAX');
},{}],"XzjvAX":[function(require,module,exports){
(function() {
  var Def, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Def = Def = (function(_super) {
    __extends(Def, _super);

    function Def() {
      _ref = Def.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Def.prototype.compile = function() {
      var args, operator;

      if (this.parent.type === 'module') {
        this.base = this.lookupClassPath(this.parent) + "." + this.base;
      }
      operator = this.parent.type === 'class' ? ":" : "=";
      args = this.args instanceof List ? this.args.compile() : "";
      return this.base + (" " + operator + " (" + args + ")->\n") + this.compileBlock(this);
    };

    return Def;

  })(Method);

}).call(this);


},{}],"./classes/methods/event":[function(require,module,exports){
module.exports=require('bEjZet');
},{}],"bEjZet":[function(require,module,exports){
(function() {
  var Event, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Event = Event = (function(_super) {
    __extends(Event, _super);

    function Event() {
      _ref = Event.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Event.prototype.compile = function() {
      var c, operator, st, _i, _len, _ref1;

      operator = this.bound ? "=" : "-";
      c = [this.base.compile() + (".addEventListener '" + this.name + "', (e)" + operator + ">")];
      c.push("event = e".replace(/^/gm, '  '));
      _ref1 = this.statements;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        st = _ref1[_i];
        c.push(st.compile().replace(/^/gm, '  '));
      }
      c.push(', true');
      return c.join("\n");
    };

    return Event;

  })(Method);

}).call(this);


},{}],"./classes/methods/get-set":[function(require,module,exports){
module.exports=require('u1kX0P');
},{}],"u1kX0P":[function(require,module,exports){
(function() {
  var Get, Set, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Set = Set = (function(_super) {
    __extends(Set, _super);

    function Set() {
      _ref = Set.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Set.prototype.compile = function() {
      if (!this.inClass()) {
        this["throw"]();
      }
      return ("@set '" + this.base + "': (" + this.name + ")->\n") + this.compileBlock(this);
    };

    return Set;

  })(Method);

  module.exports.Get = Get = (function(_super) {
    __extends(Get, _super);

    function Get() {
      _ref1 = Get.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Get.prototype.compile = function() {
      if (!this.inClass()) {
        this["throw"]();
      }
      if (this.name) {
        return ("@get '" + this.base + "': (" + this.name + ")->\n") + this.compileBlock(this);
      } else {
        return ("@get '" + this.base + "': ->\n") + this.compileBlock(this);
      }
    };

    return Get;

  })(Method);

}).call(this);


},{}],"./classes/methods/if":[function(require,module,exports){
module.exports=require('lKqeEN');
},{}],"lKqeEN":[function(require,module,exports){
(function() {
  var Else, If, Try, Unless, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.If = If = (function(_super) {
    __extends(If, _super);

    function If() {
      _ref = If.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    If.prototype.compile = function() {
      return "if " + this.exp.compile() + "\n" + this.compileBlock(this);
    };

    return If;

  })(Method);

  module.exports.Try = Try = (function(_super) {
    __extends(Try, _super);

    function Try() {
      _ref1 = Try.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Try.prototype.compile = function() {
      return "try\n" + this.compileBlock(this);
    };

    return Try;

  })(Method);

  module.exports.Catch = Try = (function(_super) {
    __extends(Try, _super);

    function Try() {
      _ref2 = Try.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Try.prototype.compile = function() {
      var args, index, prevStatement;

      index = this.parent.statements.indexOf(this);
      if (!(prevStatement = this.parent.statements[index - 1])) {
        this["throw"]();
      }
      if (['try'].indexOf(prevStatement.type) === -1) {
        this["throw"]();
      }
      args = this.args instanceof List ? this.args.compile() : this.args;
      return ("catch " + args + "\n") + this.compileBlock(this);
    };

    return Try;

  })(Method);

  module.exports.Else = Else = (function(_super) {
    __extends(Else, _super);

    function Else() {
      _ref3 = Else.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Else.prototype.compile = function() {
      var index, prevStatement;

      index = this.parent.statements.indexOf(this);
      if (!(prevStatement = this.parent.statements[index - 1])) {
        this["throw"]();
      }
      if (['if', 'unless'].indexOf(prevStatement.type) === -1) {
        this["throw"]();
      }
      return "else\n" + this.compileBlock(this);
    };

    return Else;

  })(Method);

  module.exports.Unless = Unless = (function(_super) {
    __extends(Unless, _super);

    function Unless() {
      _ref4 = Unless.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Unless.prototype.compile = function() {
      return "unless " + this.exp.compile() + "\n" + this.compileBlock(this);
    };

    return Unless;

  })(Method);

}).call(this);


},{}],"./classes/methods/iteration":[function(require,module,exports){
module.exports=require('Hh2y3n');
},{}],"Hh2y3n":[function(require,module,exports){
(function() {
  var Iteration, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Iteration = Iteration = (function(_super) {
    __extends(Iteration, _super);

    function Iteration() {
      _ref = Iteration.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Iteration.prototype.compile = function() {
      var base, c, cbargs, st, _i, _len, _ref1;

      base = this.base.compile();
      c = [];
      if (this.callbackArgs) {
        cbargs = "(" + (this.callbackArgs.compile()) + ")";
      } else {
        cbargs = "";
      }
      c.push("__for__ " + base + ", " + cbargs + "->");
      if (this.statement) {
        c.push(this.statement.compile().replace(/^/gm, '  '));
      }
      if (this.statements) {
        _ref1 = this.statements;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          st = _ref1[_i];
          c.push(st.compile().replace(/^/gm, '  '));
        }
      }
      return c.join("\n");
    };

    return Iteration;

  })(Method);

}).call(this);


},{}],"./classes/methods/timeout-interval":[function(require,module,exports){
module.exports=require('ik63Mi');
},{}],"ik63Mi":[function(require,module,exports){
(function() {
  var After, Every, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.After = After = (function(_super) {
    __extends(After, _super);

    function After() {
      _ref = After.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    After.prototype.compile = function() {
      return "setTimeout ( => \n" + this.compileBlock(this) + "\n), " + this.exp.compile();
    };

    return After;

  })(Method);

  module.exports.Every = Every = (function(_super) {
    __extends(Every, _super);

    function Every() {
      _ref1 = Every.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Every.prototype.compile = function() {
      return "setInterval ( => \n" + this.compileBlock(this) + "\n), " + this.exp.compile();
    };

    return Every;

  })(Method);

}).call(this);


},{}],"./classes/methods/xhr":[function(require,module,exports){
module.exports=require('p+e35W');
},{}],"p+e35W":[function(require,module,exports){
(function() {
  var XHR,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.XHR = XHR = (function(_super) {
    __extends(XHR, _super);

    function XHR() {
      XHR.__super__.constructor.apply(this, arguments);
      if (!!this.method) {
        this.method = (function() {
          switch (this.method) {
            case "!":
              return 'DELETE';
            case ">":
              return 'POST';
            case "=":
              return 'PUT';
          }
        }).call(this);
      } else {
        this.method = 'GET';
      }
    }

    XHR.prototype.compile = function() {
      var ret;

      ret = "__request__ (" + (this.url.compile()) + "), '" + this.method + "'";
      if (!!this.data) {
        ret += "," + (this.data.compile());
      }
      if (this.statements.length > 0) {
        ret += ", ->\n" + this.compileBlock(this);
      }
      return ret;
    };

    return XHR;

  })(Method);

}).call(this);


},{}],"./classes/errors/statement":[function(require,module,exports){
module.exports=require('vgvpy0');
},{}],"vgvpy0":[function(require,module,exports){
(function() {
  var StatementError;

  module.exports.StatementError = StatementError = (function() {
    function StatementError(exp) {
      this.exp = exp;
    }

    return StatementError;

  })();

}).call(this);


},{}],"./classes/errors/not-supported-statement":[function(require,module,exports){
module.exports=require('t785oc');
},{}],"t785oc":[function(require,module,exports){
(function() {
  var NotSupportedStatementError,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.NotSupportedStatementError = NotSupportedStatementError = (function(_super) {
    __extends(NotSupportedStatementError, _super);

    function NotSupportedStatementError(exp, s, context) {
      this.exp = exp;
      this.s = s;
      this.context = context != null ? context : false;
    }

    NotSupportedStatementError.prototype.toString = function() {
      var message;

      message = "Statement " + this.exp + " not supports statement " + this.s;
      if (this.context) {
        message += " in this context";
      }
      return message;
    };

    return NotSupportedStatementError;

  })(StatementError);

}).call(this);


},{}],"./classes/errors/sub-statement":[function(require,module,exports){
module.exports=require('VazbGG');
},{}],"VazbGG":[function(require,module,exports){
(function() {
  var SubStatementError, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.SubStatementError = SubStatementError = (function(_super) {
    __extends(SubStatementError, _super);

    function SubStatementError() {
      _ref = SubStatementError.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SubStatementError.prototype.toString = function() {
      return "Satement " + this.exp + " can't have sub statements!";
    };

    return SubStatementError;

  })(StatementError);

}).call(this);


},{}],"./classes/tree":[function(require,module,exports){
module.exports=require('T4anfk');
},{}],"T4anfk":[function(require,module,exports){
(function() {
  var Root, Tree,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.Root = Root = (function(_super) {
    __extends(Root, _super);

    function Root() {
      Root.__super__.constructor.apply(this, arguments);
      this.statements = [];
      this.line = 0;
      this.column = 0;
    }

    Root.prototype.compile = function() {
      return this.compileBlock(this);
    };

    return Root;

  })(Statement);

  module.exports.Tree = Tree = (function() {
    function Tree() {
      this.root = new Root({
        type: 'root'
      });
      this.ancestors = [];
    }

    Tree.prototype.addNode = function(indent, exp, line, column) {
      if (!exp) {
        return;
      }
      exp.line = line;
      exp.column = column;
      this.ancestors.splice(indent);
      this.current = this.root;
      this.ancestors.forEach((function(e) {
        return this.current = e;
      }), this);
      if (!this.current.statements) {
        throw new SubStatementError(this.current);
      }
      if (this.current.validateStatement) {
        if (this.current.validateStatement(exp)) {
          this.current.statements.push(exp);
          exp.parent = this.current;
        } else {
          throw new NotSupportedStatementError(this.current, exp);
        }
      } else {
        this.current.statements.push(exp);
        exp.root = this.root;
        exp.parent = this.current;
      }
      return this.ancestors.push(exp);
    };

    return Tree;

  })();

}).call(this);


},{}],"classes":[function(require,module,exports){
module.exports=require('tYPWLe');
},{}],"tYPWLe":[function(require,module,exports){
(function() {
  var requireMerge;

  requireMerge = function(path) {
    var key, obj, value, _results;

    obj = require(path);
    _results = [];
    for (key in obj) {
      value = obj[key];
      obj.parent = module.exports;
      module.exports[key] = value;
      _results.push(this[key] = value);
    }
    return _results;
  };

  requireMerge('./classes/literals');

  requireMerge('./classes/lists');

  requireMerge('./classes/accessors');

  requireMerge('./classes/statement');

  requireMerge('./classes/method');

  requireMerge('./classes/statements/call');

  requireMerge('./classes/statements/class');

  requireMerge('./classes/statements/conditional');

  requireMerge('./classes/statements/dispose');

  requireMerge('./classes/statements/group');

  requireMerge('./classes/statements/include');

  requireMerge('./classes/statements/log');

  requireMerge('./classes/statements/module');

  requireMerge('./classes/statements/new');

  requireMerge('./classes/statements/operation');

  requireMerge('./classes/statements/prop');

  requireMerge('./classes/statements/render');

  requireMerge('./classes/statements/super');

  requireMerge('./classes/statements/template');

  requireMerge('./classes/methods/await');

  requireMerge('./classes/methods/constructor');

  requireMerge('./classes/methods/def');

  requireMerge('./classes/methods/event');

  requireMerge('./classes/methods/get-set');

  requireMerge('./classes/methods/if');

  requireMerge('./classes/methods/iteration');

  requireMerge('./classes/methods/timeout-interval');

  requireMerge('./classes/methods/xhr');

  requireMerge('./classes/errors/statement');

  requireMerge('./classes/errors/not-supported-statement');

  requireMerge('./classes/errors/sub-statement');

  requireMerge('./classes/tree');

}).call(this);


},{}]},{},[])
;
; window.require = require})()